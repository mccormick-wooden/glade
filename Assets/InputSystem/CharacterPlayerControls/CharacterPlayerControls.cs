//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/CharacterPlayerControls/CharacterPlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterPlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterPlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterPlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""04087c1d-719e-4d21-ab78-94d9aef6554f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41cfab35-370b-4200-929f-8d7854266d71"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slash"",
                    ""type"": ""Button"",
                    ""id"": ""8c1a5430-3947-4dda-9a47-92514a01bad5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shield"",
                    ""type"": ""Button"",
                    ""id"": ""b99a7947-4aae-45f4-b0f6-13c9752fc63d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2672c397-b0f9-4571-abbf-8458abee1f37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock On Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""c119bf23-8759-4930-97be-094691f57ad5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock On Cycle Left"",
                    ""type"": ""Button"",
                    ""id"": ""cf990f7a-2400-4806-b8f4-40ed076f5bff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock On Cycle Right"",
                    ""type"": ""Button"",
                    ""id"": ""3b58555e-1431-4311-8eb6-65c5b7a8a1e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""0e23ab35-029f-4f26-b782-e49ab770e165"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80827b35-481c-4019-9391-6178cf7d3c71"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68df9930-6d45-412b-b2c9-5331acfa707d"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e776f043-e849-46d0-bcb2-ee7e4779b4e9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""240698f4-0c44-413a-80ca-576e80132ed5"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d54fed2d-2c8d-4b2d-a6e0-6212b08bd1ab"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1e4228e-5391-454c-8a95-ced59060f846"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ef2907b-7eab-4b85-81c3-5a9b7f6b737b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""8d617ad1-5dd0-4ae8-8aa5-7fe5bdf1ace5"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c387181d-c3dd-40a7-9a59-ad8f44dae7ba"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a6929238-4b15-42af-8238-db0a5f57d0be"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""29a90678-22cc-487c-af1d-98e23fb27c9e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c4cb0024-0b5f-43c5-a1ea-736959dc688a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""29346dd7-5968-4313-9820-b22a895e738b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b3c8ab51-202e-4da1-b32e-70d39e8c2181"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6fd85825-6888-4d53-a7ff-ce2f55e5e574"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""70345b3b-d844-4bcc-911d-1b2f0b3a807c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cb6fc53b-cba4-465b-9c35-fdddbd89e9dd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""433f0734-7099-4b67-8aa1-825fb1e96db5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8f804aa-ba5d-4f47-9fce-235069f0fd42"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5ce7fa9-da66-4d19-91d1-60d85a1ba05a"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6f5f523-96b5-4205-ac01-611655a00f64"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Cycle Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6329cf3f-59e9-4421-b872-ad3ca12cafb9"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Cycle Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""872d9b36-711a-437e-8458-3312fce66db3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Cycle Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5b1af06-f24f-4615-be45-51437b878a4c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Cycle Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cbe1b32-0b4d-47f5-ab62-4bd964fc8347"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseGame"",
            ""id"": ""1dda00a2-148b-4538-8a44-2fa2a0047418"",
            ""actions"": [
                {
                    ""name"": ""PauseGameAction"",
                    ""type"": ""Button"",
                    ""id"": ""4e88761c-2f7d-4d4b-aa2b-ba8f68e7ef82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b0b76fb7-ee15-40ac-b123-725b34d29082"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""746091c3-4c8c-4017-aaf6-611f590ae756"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGameAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""569a3d68-d31a-48ac-9c2b-d186b31007e4"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGameAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""151a4317-b237-4d05-b88e-aa88fc6daf41"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3968caa1-b361-4a7f-ab2a-ff3a7e28acc3"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SkipScene"",
            ""id"": ""bdcd5bc2-c8f3-4549-b51c-88f9cfc749b0"",
            ""actions"": [
                {
                    ""name"": ""SkipSceneAction"",
                    ""type"": ""Button"",
                    ""id"": ""d7676dcc-4e5d-4e21-80c6-ac26beca9ea1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70504d48-77ab-4b13-992e-09fc5b96bdf0"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipSceneAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47583645-6ac4-482d-aedc-9642ed132bbd"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipSceneAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialogueControl"",
            ""id"": ""a3944762-98a8-45d2-9510-b8d07b903394"",
            ""actions"": [
                {
                    ""name"": ""ProgressDialogueAction"",
                    ""type"": ""Button"",
                    ""id"": ""4f5087c2-be38-439c-a3d8-4e3df5c92ede"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10ba6aa9-f409-471a-a944-3cef6f04c69d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ProgressDialogueAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5530eeec-55ce-45f7-8612-88b9b7bab108"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ProgressDialogueAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse&Keyboard"",
            ""bindingGroup"": ""Mouse&Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Slash = m_Gameplay.FindAction("Slash", throwIfNotFound: true);
        m_Gameplay_Shield = m_Gameplay.FindAction("Shield", throwIfNotFound: true);
        m_Gameplay_SpecialAttack = m_Gameplay.FindAction("Special Attack", throwIfNotFound: true);
        m_Gameplay_LockOnToggle = m_Gameplay.FindAction("Lock On Toggle", throwIfNotFound: true);
        m_Gameplay_LockOnCycleLeft = m_Gameplay.FindAction("Lock On Cycle Left", throwIfNotFound: true);
        m_Gameplay_LockOnCycleRight = m_Gameplay.FindAction("Lock On Cycle Right", throwIfNotFound: true);
        m_Gameplay_Pickup = m_Gameplay.FindAction("Pickup", throwIfNotFound: true);
        // PauseGame
        m_PauseGame = asset.FindActionMap("PauseGame", throwIfNotFound: true);
        m_PauseGame_PauseGameAction = m_PauseGame.FindAction("PauseGameAction", throwIfNotFound: true);
        m_PauseGame_MouseMove = m_PauseGame.FindAction("MouseMove", throwIfNotFound: true);
        // SkipScene
        m_SkipScene = asset.FindActionMap("SkipScene", throwIfNotFound: true);
        m_SkipScene_SkipSceneAction = m_SkipScene.FindAction("SkipSceneAction", throwIfNotFound: true);
        // DialogueControl
        m_DialogueControl = asset.FindActionMap("DialogueControl", throwIfNotFound: true);
        m_DialogueControl_ProgressDialogueAction = m_DialogueControl.FindAction("ProgressDialogueAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Slash;
    private readonly InputAction m_Gameplay_Shield;
    private readonly InputAction m_Gameplay_SpecialAttack;
    private readonly InputAction m_Gameplay_LockOnToggle;
    private readonly InputAction m_Gameplay_LockOnCycleLeft;
    private readonly InputAction m_Gameplay_LockOnCycleRight;
    private readonly InputAction m_Gameplay_Pickup;
    public struct GameplayActions
    {
        private @CharacterPlayerControls m_Wrapper;
        public GameplayActions(@CharacterPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Slash => m_Wrapper.m_Gameplay_Slash;
        public InputAction @Shield => m_Wrapper.m_Gameplay_Shield;
        public InputAction @SpecialAttack => m_Wrapper.m_Gameplay_SpecialAttack;
        public InputAction @LockOnToggle => m_Wrapper.m_Gameplay_LockOnToggle;
        public InputAction @LockOnCycleLeft => m_Wrapper.m_Gameplay_LockOnCycleLeft;
        public InputAction @LockOnCycleRight => m_Wrapper.m_Gameplay_LockOnCycleRight;
        public InputAction @Pickup => m_Wrapper.m_Gameplay_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Slash.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSlash;
                @Slash.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSlash;
                @Slash.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSlash;
                @Shield.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShield;
                @Shield.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShield;
                @Shield.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShield;
                @SpecialAttack.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSpecialAttack;
                @LockOnToggle.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnToggle;
                @LockOnToggle.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnToggle;
                @LockOnToggle.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnToggle;
                @LockOnCycleLeft.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnCycleLeft;
                @LockOnCycleLeft.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnCycleLeft;
                @LockOnCycleLeft.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnCycleLeft;
                @LockOnCycleRight.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnCycleRight;
                @LockOnCycleRight.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnCycleRight;
                @LockOnCycleRight.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLockOnCycleRight;
                @Pickup.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Slash.started += instance.OnSlash;
                @Slash.performed += instance.OnSlash;
                @Slash.canceled += instance.OnSlash;
                @Shield.started += instance.OnShield;
                @Shield.performed += instance.OnShield;
                @Shield.canceled += instance.OnShield;
                @SpecialAttack.started += instance.OnSpecialAttack;
                @SpecialAttack.performed += instance.OnSpecialAttack;
                @SpecialAttack.canceled += instance.OnSpecialAttack;
                @LockOnToggle.started += instance.OnLockOnToggle;
                @LockOnToggle.performed += instance.OnLockOnToggle;
                @LockOnToggle.canceled += instance.OnLockOnToggle;
                @LockOnCycleLeft.started += instance.OnLockOnCycleLeft;
                @LockOnCycleLeft.performed += instance.OnLockOnCycleLeft;
                @LockOnCycleLeft.canceled += instance.OnLockOnCycleLeft;
                @LockOnCycleRight.started += instance.OnLockOnCycleRight;
                @LockOnCycleRight.performed += instance.OnLockOnCycleRight;
                @LockOnCycleRight.canceled += instance.OnLockOnCycleRight;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // PauseGame
    private readonly InputActionMap m_PauseGame;
    private IPauseGameActions m_PauseGameActionsCallbackInterface;
    private readonly InputAction m_PauseGame_PauseGameAction;
    private readonly InputAction m_PauseGame_MouseMove;
    public struct PauseGameActions
    {
        private @CharacterPlayerControls m_Wrapper;
        public PauseGameActions(@CharacterPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGameAction => m_Wrapper.m_PauseGame_PauseGameAction;
        public InputAction @MouseMove => m_Wrapper.m_PauseGame_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_PauseGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseGameActions set) { return set.Get(); }
        public void SetCallbacks(IPauseGameActions instance)
        {
            if (m_Wrapper.m_PauseGameActionsCallbackInterface != null)
            {
                @PauseGameAction.started -= m_Wrapper.m_PauseGameActionsCallbackInterface.OnPauseGameAction;
                @PauseGameAction.performed -= m_Wrapper.m_PauseGameActionsCallbackInterface.OnPauseGameAction;
                @PauseGameAction.canceled -= m_Wrapper.m_PauseGameActionsCallbackInterface.OnPauseGameAction;
                @MouseMove.started -= m_Wrapper.m_PauseGameActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_PauseGameActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_PauseGameActionsCallbackInterface.OnMouseMove;
            }
            m_Wrapper.m_PauseGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseGameAction.started += instance.OnPauseGameAction;
                @PauseGameAction.performed += instance.OnPauseGameAction;
                @PauseGameAction.canceled += instance.OnPauseGameAction;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
            }
        }
    }
    public PauseGameActions @PauseGame => new PauseGameActions(this);

    // SkipScene
    private readonly InputActionMap m_SkipScene;
    private ISkipSceneActions m_SkipSceneActionsCallbackInterface;
    private readonly InputAction m_SkipScene_SkipSceneAction;
    public struct SkipSceneActions
    {
        private @CharacterPlayerControls m_Wrapper;
        public SkipSceneActions(@CharacterPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipSceneAction => m_Wrapper.m_SkipScene_SkipSceneAction;
        public InputActionMap Get() { return m_Wrapper.m_SkipScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkipSceneActions set) { return set.Get(); }
        public void SetCallbacks(ISkipSceneActions instance)
        {
            if (m_Wrapper.m_SkipSceneActionsCallbackInterface != null)
            {
                @SkipSceneAction.started -= m_Wrapper.m_SkipSceneActionsCallbackInterface.OnSkipSceneAction;
                @SkipSceneAction.performed -= m_Wrapper.m_SkipSceneActionsCallbackInterface.OnSkipSceneAction;
                @SkipSceneAction.canceled -= m_Wrapper.m_SkipSceneActionsCallbackInterface.OnSkipSceneAction;
            }
            m_Wrapper.m_SkipSceneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SkipSceneAction.started += instance.OnSkipSceneAction;
                @SkipSceneAction.performed += instance.OnSkipSceneAction;
                @SkipSceneAction.canceled += instance.OnSkipSceneAction;
            }
        }
    }
    public SkipSceneActions @SkipScene => new SkipSceneActions(this);

    // DialogueControl
    private readonly InputActionMap m_DialogueControl;
    private IDialogueControlActions m_DialogueControlActionsCallbackInterface;
    private readonly InputAction m_DialogueControl_ProgressDialogueAction;
    public struct DialogueControlActions
    {
        private @CharacterPlayerControls m_Wrapper;
        public DialogueControlActions(@CharacterPlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ProgressDialogueAction => m_Wrapper.m_DialogueControl_ProgressDialogueAction;
        public InputActionMap Get() { return m_Wrapper.m_DialogueControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueControlActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueControlActions instance)
        {
            if (m_Wrapper.m_DialogueControlActionsCallbackInterface != null)
            {
                @ProgressDialogueAction.started -= m_Wrapper.m_DialogueControlActionsCallbackInterface.OnProgressDialogueAction;
                @ProgressDialogueAction.performed -= m_Wrapper.m_DialogueControlActionsCallbackInterface.OnProgressDialogueAction;
                @ProgressDialogueAction.canceled -= m_Wrapper.m_DialogueControlActionsCallbackInterface.OnProgressDialogueAction;
            }
            m_Wrapper.m_DialogueControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ProgressDialogueAction.started += instance.OnProgressDialogueAction;
                @ProgressDialogueAction.performed += instance.OnProgressDialogueAction;
                @ProgressDialogueAction.canceled += instance.OnProgressDialogueAction;
            }
        }
    }
    public DialogueControlActions @DialogueControl => new DialogueControlActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse&Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSlash(InputAction.CallbackContext context);
        void OnShield(InputAction.CallbackContext context);
        void OnSpecialAttack(InputAction.CallbackContext context);
        void OnLockOnToggle(InputAction.CallbackContext context);
        void OnLockOnCycleLeft(InputAction.CallbackContext context);
        void OnLockOnCycleRight(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
    public interface IPauseGameActions
    {
        void OnPauseGameAction(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
    public interface ISkipSceneActions
    {
        void OnSkipSceneAction(InputAction.CallbackContext context);
    }
    public interface IDialogueControlActions
    {
        void OnProgressDialogueAction(InputAction.CallbackContext context);
    }
}
